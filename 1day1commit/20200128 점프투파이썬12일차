클래스
클래스가 필요한 이유? 간단하게 프로그래밍하기 위함
클래스와 객체
과자 틀 -> 클래스
과자 틀로 만든 과자 -> 객체
클래스로 만든 객체들은 서로 영향을 주지 않는다.
클래스 만드는 예
class Cookie:
  pass

a = Cookie()
b = Cookie()

객체와 인스턴스의 차이
a.Cookie()에서 a객체이고 a객체는 Cookie의 인스턴스이다.
인스턴스라는 말은 주로 특정 객체가 어떤 클래스의 객체인지를 관계 위주로 설명할 때 사용한다.

클래스를 만들때는 먼저 구상하고 만들어야함
ex)사칙연산을 위해 두 숫자를 입력받아야함 -> setdata 메서드
나누기 더하기 빼기 곱하기 기능? 함수사용
메서드 - 클래스 안에 구현된 함수

1. 객체에 숫자 지정할 수 잇게 만들기
>>> class FourCal:
...     def setdata(self, first, second): # self는 a객체를 나타내고 4는 first 2는 second이다.
...             self.first = first # a.first = 4
...             self.second = second # a.second = 2
a.setdata(4, 2)
b.setdata(3, 7)
여기서 a와 b 객체는 서로 상관없이 독립적인 값을 유지한다.

2. 더하기 와 그외 추가기능 넣기
>>> class FourCal:
...     def setdata(self, first, second):
...             self.first = first
...             self.second = second
...     def add(self):
...             result = self.first + self.second # result = a.first + a.second
...             return result # return 4 + 2
...     def mul(self):
...             result = self.first * self.second
...             return result
...     def sub(self):
...             result = self.first - self.second
...             return result
...     def div(self):
...             result = self.first / self.second
...             return result
...
>>> a = FourCal()
>>> b = FourCal()
>>> a.setdata(4, 2)
>>> b.setdata(3, 8)
>>> a.add()
6
>>> a.sub()
2
>>> a.div()
2.0
>>> a.mul()
8
>>> b.add()
11
>>> b.mul()
24
>>> b.sub()
-5
>>> b.div()
0.375

생성자(Constructor) # 객체에 초깃값을 설정해야 할 필요가 있을 때는 setdata와 같은 메서드를 호출하여 초깃값을 설정하기보다 생정자를구현하는 것이 안전함
>>> class FourCal:
...     def __init__(self, first, second): # 추가된 부분, __init__을 사용하면 이 메서드는 생성자가 됨
...             self.first = first
...             self.second = second
...     def setdata(self, first, second):
...             self.first = first
...             self.second = second
...     def add(self):
...             result = self.first + self.second
...             return result
...     def mul(self):
...             result = self.first * self.second
...             return result
...     def sub(self):
...             result = self.first - self.second
...             return result
...     def div(self):
...             result = self.first / self.second
...             return result
...
전과 다르게 a = FourCal(4, 2)로 씀(setdata안씀)

클래스와 상속
상속을 쓰는 이유 - 기존 클래스를 변경하지 않고 기능추가나 변경할때 사용, 기존 클래스가 라이브러리 형태로 제공되거나 수정이 허용되지 않는 상황이라면 상속써야함
FourCal함수 상속 예
>>> class MoreFourCal(FourCal): # class 새로만드는상속함수(상속할함수)
...     def pow(self):
...             result = self.first ** self.second # 제곱
...             return result
...
>>> a = MoreFourCal(4, 2)
>>> a.pow()
16

메서드 오버라이딩 # 부모 클래스에 있는 메서드를 동일한 이름으로 다시 만드는 것
ex)
>>> class SafeFourCal(FourCal):
...     def div(self):
...             if self.second == 0:
...                     return 0
...             else:
...                     return self.first / self.second
...
>>> a = SafeFourCal(4, 0)
>>> a.div()
0
클래스와 변수
>>> class Family:
...     lastname = "김" # lastname이 클래스 변수
...
>>> print(Family.lastname)
김
>>> a = Family()
>>> b = Family()
>>> print(a.lastname)
김
>>> print(b.lastname)
김
만약 김을 박으로 바꾸면?
>>> Family.lastname = "박"
>>> print(a.lastname)
박
>>> print(b.lastname)
박
클래스 변수 값을 변경했더니 클래스로 만든 객체의 lastname값도 모두 변경됨
>>> id(Family.lastname)
1815334998544
>>> id(a.lastname)
1815334998544
>>> id(b.lastname)
1815334998544
모두 같은 메모리인걸 알 수 있음

