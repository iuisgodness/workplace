자료형 - 숫자형
정수형이나 실수형은 a = 123, b = 45.315로 나타내면 된다. 
a = 4.24E10은 4.24x10의 10승이라는 뜻이다
8진수 = 0o숫자, 16진수 = 0x숫자 형태이다.
x의 y의 제곱 = x**y, 나눗셈 후 나머지를 반환하려면 %, 나눗셈 후 몫을 반환하려면 //
자료형 - 문자열 자료형
문자열 자료형은 " ", ' ', """ """, ''' '''로 나타낼 수 있다.
문자열 안에 작은따옴표나 큰따옴표를 포함시키고 싶을 때는 ex)"IU's favorite song is good day." -> 큰따옴표로 둘러쌓기
문자열에 큰따옴표를 포함시키려면 '"I am hungry." he said' -> 작은따옴표로 둘러쌓기
또는 백슬래시를 사용한다.(\) -> 나타내려는 따옴표앞에 \사용
IU is so pretty
Today is Thursday
위와 같이 문장을 줄바꿈 하기 위해서는 -> "IU is so pretty"\n"Today is Thursday"와 같이 \n을 사용한다. 
또는 multiline = '''
IU is so pretty
Today is Thursday
'''
또는 """ """도 사용 가능하다. print(multiline)하면 됨.
\n = 문자열 안에서 줄을 바꿀 때 사용
\t = 문자열 사이에 탭 간격을 줄 때 사용
\\ = 문자\를 그대로 표현할 때 사용
\' = '그대로 표현할 때 사용
\" = "그대로 표현할 때 사용
문자열은 더하거나 곱할 수 있다.
ex) head = "IU"
tail = "is so pretty"
head + tail -> "IU is so pretty"
head*3 -> 'IUIUIU'
문자열 곱하기 응용
============
IU
============
를 나타내고 싶으면
print("=" * 10)
print("IU")
print("=" * 10)
문자열 길이 구하기 -> len()함수 사용
문자열 인덱싱 = 가리킨다.
ex) a = "IU is so pretty"
a[1] -> U             ※ 파이썬은 0부터 센다. 그리고 띄어쓰기부분도 포함한다.
a[-1] -> y             뒤에서부터 센다.
문자열 슬라이싱 = 잘라낸다.
a[0:4] = a[:4] = 0부터 3까지 표현 4는 포함x
a[:5] -> 'IU is'
a[5:] -> ' so pretty'      5부터 쭈욱 그 뒤까지 전체 표현한다.
weatter를 weather로 바꾸려면??(슬라이싱 기법 사용)
a = "weatter"
a[:4] -> 'weat'
a[5:] -> 'er'
a[:4] + 'h' + a[5:]
'weather'
문자열 포매팅
%s = 문자열
%c = 문자 1개
%d = 정수
%f = 부동 소수
%o = 8진수
%x = 16진수
%% = %자체표현
정렬과 공백
"%10s" %"hi" -> 전체 길이 10개공간 만들고 hi를 오른쪽으로 정렬하고 나머지 공백은 남겨두라
"%-10s" %"hi" -> 반대로 왼쪽 정렬
"%0.4f" %3.141592 -> 3.1416 (소숫점 5째자리에서 반올림하여 4째자리로 표현)
"%10.4f" %3.141592 ->     3.1416 (전체길이 10개공간 만들고 반올림 후 오른쪽 정렬)
format 함수 사용한 포매팅
~~~~{0}~~~.format(3)
~~~~3~~~이된다.
~~{0}~~~{1}~~~.format(x,y)로 2개 이상 넣기도 가능
왼쪽 정렬  -> :< (:와 <사이에 !와 같이 하나를 넣으면 정렬 후 나머지는 !로 채워짐 오른쪽 정렬 가운데 정렬도 다 똑같다.)
오른쪽 정렬 ->  :>
가운데 정렬 -> :^
3.6버전 이후 f문자열 포매팅 생김 ->    f'           '
x = ~~
y = ~~~
f'나의 이름은 {x}입니다. 나이는 {y}입니다.'
문자열 관련 함수
a = ~~~
a.count(b) -> 문자열 중 문자 b의 개수를 돌려줌
a.find(b) -> 문자열 중 문자 b의 위치를 찾아줌
만약 -1이 반환되면 그 문자는 문자열에 없는 것이다.
a.index(b) -> 문자열 중 문자 b의 위치를 찾아줌 단, 없는 값은 -1로 반환되지 않고 오류가 뜸
문자열 삽입(join)
",".join('abcd') -> 'a,b,c,d'
소문자를 대문자로 바꾸기 a.upper(), 대문자를 소문자로 바꾸기 a.lower()
왼쪽 공백 지우기 = a.lstrip(), 오른쪽 공백 지우기 = a.rstrip(), 양쪽 공백 지우기 = a.srtip()
문자열 바꾸기(슬라이싱기법 말고!!)
weatper를 weather로 바꾸려면??(replace함수 사용)
a = "weatper"
a.replace('p', 'h')
문자열 나누기 -> a.split()
만약 a.split(:)면 :를 기준으로 문자열 나눈다.
자료형 - 리스트 자료형
a = [1, 2, 3, 4, 5] -> 리스트
리스트의 인덱싱 a[0] -> 1
a[0] + a[2] -> 4
a[-1] -> 5
a = [1, 2, ['a', 'b', ['IU', 'is']]]
이러한 삼중 리스트안에서 인덱싱을 해보자.
IU를 꺼내기 위해서는 -> a[2][2][0]하면 된다.
슬라이싱 기법은 a[:2] -> [1, 2]
중첩 리스트에서는 a[2][:2] -> ['a', 'b']
리스트도 더하거나 곱해서 반복 가능하다.
리스트 길이 구하기 -> len()
정수나 실수를 문자열의 형태로 바꾸어주는 파이썬의 내장함수 = str()
리스트는 수정 삭제 가능
a = [1, 2, 3]
a[2] = 4
a
a[1, 2, 4]
del함수로 삭제 가능
del a[1]
a
[1, 4]
리스트와 관련 함수
리스트에 요소 추가
a = [1, 2, 3]
a.append(4) -> 1,2,3 뒤에 4가 추가됨
a = [1, 4, 3, 2]
a.sort() -> 1,2,3,4로 정렬됨
a.reverse() -> 2,3,4,1로 뒤집어짐(순서를 정렬하고 역순하는게 아님)
위치변환(index)
a = [1, 2, 3]
a.index(3) -> 리스트 안에 3값의 위치값을 변환해줌 = 2, 존재하지 않는 값은 오류 뜸
리스트에 요소 삽입
a = [1, 2, 3]
a.insert(0, 4) -> a[0]위치에 4 삽입하라는 뜻
[4, 1, 2, 3]
리스트 요소 제거 
a = [1, 2, 3, 1, 2, 3]
a.remove(3) -> 두개의 3중 첫번째 3 제거
[1, 2, 1, 2, 3]
리스트 요소 끄집어내기
a = [1, 2, 3]
a.pop() -> 맨 마지막 3을 끄집어내고 나머지만 남김
3
a
[1, 2]
a.pop(1) -> 리스트중 1번째에 위치한 2를 끄집어내고 나머지만 남김
[1, 3]
리스트에 포함된 요소개수 세기
a = [1, 2, 3, 1]
a.count(1) -> 리스트 안의 1의 개수를 센다
2
리스트 확장
a = [1, 2, 3]
a.extend([4,5]) -> 원래 리스트 뒤에 4,5를 확장한다.
a = [1, 2, 3, 4, 5]가 됨
자료형 - 튜플
튜플과 자료형의 차이점은 리스트는 생성, 수정, 삭제가 가능하지만 튜플은 그 값을 바꿀 수 없다. 따라서 정한 값이 안바뀌기를 원할때는 튜플을 사용하자.
튜플의 형태 -> t1 = (1, 2, 3)
인덱싱 -> t1[0] = 1
슬라이싱 -> t1[:1] = (1)
튜플은 더하거나 곱해서 반복할 수 있다.
튜플의 길이 구하기 -> len()
ex)(1,2,3)이라는 튜플에 값 4를 추가하려면 -> a+(4,)
