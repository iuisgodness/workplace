4-2 사용자의 입력과 출력
사용자 입력
사용자가 입력한 값을 어떤 변수에 대입하고 싶을 때는 -> input사용
input은 입력되는 모든 것을 문자열로 취급한다.
input("질문 내용")
ex)
>>> number = input("숫자를 입력하세요:")
숫자를 입력하세요:3
>>> print(number)
3

print
입력한 자료형을 출력함
print의 할수 있는 일
1. 큰따옴표로 둘러싸인 문자열은 +연산과 동일하다.
>>> print("life" "is" "too short")
lifeistoo short
>>> print("life"+"is"+"too short")
lifeistoo short
2. 문자열 띄어쓰기는 콤마로 한다.
>>> print("life","is","too short")
life is too short
3. 한 줄에 결괏값 출력하기 -> end = ' '
>>> for i in range(10):
...     print(i, end = ' ')
...
0 1 2 3 4 5 6 7 8 9 >>>

4-3 파일 읽고 쓰기
파일 객체 = open(파일 이름, 파일 열기 모드)
파일 열기 모드
r - 읽기 모드, 파일을 읽기만 할 때 사용 
w - 쓰기 모드, 파일에 내용을 슬 때 사용 # 파일을 쓰기 모드로 열면 해당 파일이 이미 존재할 경우 원래 있던 내용 모두 사라지고 해당 파일이 존재하지 않으면 새로운 파일 생성됨
a - 추가 모드, 파일의 마지막에 새로운 내용을 추가할 때 사용
디렉터리에 파일이 없는 상태에서 쓰기모드로 열면 새로운 파일이 현재 디렉터리에 생성됨

새파일을 C:\doit에 생성하고 싶다면?
f = open("C:\doit\새파일.txt", 'w')
f.close()

파일을 쓰기 모드로 열어 출력값 적기
ex)
# writedata.py
f = open("C:\doit\새파일.txt", 'w')
for i in range(1, 11):
    data = "%d 줄입니다.\n" % i
    f.write(data)
f.close()
그 동안의 print방식은 모니터 화면에 출력하는 방법이고, 첫 번째 방법은 모니터 화면 대신 파일에 결괏값을 적는 방법이다.
C:\Users\army>cd C:\doit

C:\doit>python writedata.py
이렇게 하면 C드라이브에 doit에 새파일 생성됨

프로그램 외부에 저장된 파일을 읽는 여러 가지 방법
1. readline함수 사용
ex)
# readline.py
f = open("C:\doit\새파일.txt", 'r')
line = f.readline() # 파일의 첫 번째 줄을 읽어 출력하는 경우
print(line)
f.close()
-> 1번째 줄입니다.
만약 모든 줄을 읽어서 화면에 출력하고 싶다면?
# readline_all.py
f = open("C:\doit\새파일.txt", 'r')
while True: # 무한루프
    line = f.readline()
    if not line: break
    print(line)
f.close()

2. readlines()함수 사용하기
f = open("C:\doit\새파일.txt", 'r')
lines = f.readlines() # 파일의 모든 줄을 읽어서 각각의 줄을 요소로 갖는 리스트로 돌려줌
for line in lines:
    print(line)
f.close()

3. read함수 사용하기
f = open("C:\doit\새파일.txt", 'r')
data = f.read() # 파일 내용의 전체를 문자열로 돌려준다.
print(data)
f.close()

파일에 새로운 내용 추가하기
# adddata.py
f = open("C:\doit\새파일.txt", 'a') # 'a' 사용
for i in range(11, 20):
    data = "%d 줄입니다.\n" % i
    f.write(data) # 결괏값을 기존 파일에 추가
f.close()

with문과 함께 사용하기
f = open("foo.txt", 'w')
f.write("Life is too short, you need python")
f.close()
를 with문으로 변경
with open("foo.txt", 'w') as f: # with블록을 벗어나는 순간 열린 파일 객체 f가 자동으로 close되어 편리하다.
  f.write("Life is too short, you need python")
  
sys 모듈로 매개변수 주기(여기 먼 개소리인지 어렵네)
# sys1.py
import sys


args = sys.argv[1:] # argv[0]은 파일이름인 sys1.py가 되고 argv[1]부터 뒤에 따라오는 인수가 차례로 argv의 요소가 됨
for i in args:
    print(i)

#sys2.py
import sys
args = sys.argv[1:]
for i in args:
    print(i.upper(), end = ' ') # upper함수는 소문자 -> 대문자







