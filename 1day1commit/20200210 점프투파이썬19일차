외장함수 2
canlendar
- 파이썬에서 달력을 볼 수 있게 해주는 모듈

(1) canlendar.canlendar(연도)
- 그 해의 전체 달력을 볼 수 있음
import canlendar
print(canlendar.canlendar(2020))
- 2020 달력이 출력됨

(2) calendar.prcal(연도)
- canlendar.canlendar와 같음
canlendar.prcal(2020)

(3) calendar.prmonth(연도, 월)
>>> calendar.prmonth(2020, 2)
   February 2020
Mo Tu We Th Fr Sa Su
                1  2
 3  4  5  6  7  8  9
10 11 12 13 14 15 16
17 18 19 20 21 22 23
24 25 26 27 28 29

(4) canlendar.weekday(연도, 월, 일)
- 그 날짜에 해당하는 요일 정보를 돌려준다. 월요일은 0 ~ 일요일은 6
>>> calendar.weekday(2020, 2 , 10)
0 # 월요일

(5) canlendar.monthrange(연도, 월)
- 입력받은 달의 1일이 무슨 요일인지와 그 달이 며칠까지 있는지를 튜플 형태로 돌려준다.
>>> calendar.monthrange(2020, 2)
(5, 29) # 토요일이고 29일까지 있다.

random
- 난수를 발생시키는 모듈

0.0~1.0 사이의 실수 중에서 난수 값을 돌려주는 예
>>> import random
>>> random.random()
0.923098217008403

1~10 사이의 정수 중에서 난수 값을 돌려주는 예
>>> random.randint(1, 10)
4

1~55 사이의 정수 중에서 난수 값을 돌려주는 예
>>> random.randint(1, 55)
29

ex)
# random_pop.py
import random
def random_pop(data):
    number = random.randint(0, len(data)-1)
    return data.pop(number)

if __name__ == "__main__":
    data = [1, 2, 3, 4, 5]
    while data: print(random_pop(data))
- 위 random_pop함수는 리스트의 요소 중에서 무작위로 하나를 선택하여 꺼낸 다음 그 값을 돌려준다. 꺼낸 요소는 pop에 의해 사라짐

위 ex를 choice함수를 사용하여 직관적으로 만들기
# random_choice.py
import random
def random_pop(data):
    number = random.choice(data)
    data.remove(number)
    return number

if __name__ == "__main__":
    data = [1, 2, 3, 4, 5]
    while data: print(random_pop(data))
    
리스트의 항목을 무작위로 섞고 싶을 때 -> random.shuffle
>>> import random
>>> data = [1, 2, 3, 4, 5]
>>> random.shuffle(data)
>>> data
[3, 1, 5, 4, 2]

webbrowser
- 자신의 시스템에서 기본 웹 브라우저를 자동으로 실행하는 모듈

구글가기
>>> import webbrowser
>>> webbrowser.open("http://google.com")

새로운 창 사용
>>> webbrowser.open_new("http://google.com")

스레드를 다루는 threading 모듈
스레드
- 한 프로세스 안에서 2가지 또는 그 이상의 일을 동시에 수행할 수 있게함

ex1)
# thread_test.py
import time

def long_task():
    for i in range(5):
        time.sleep(1)
        print("working:%s\n" % i)


print("Start")
for i in range(5):
    long_task()

print("End")

25초나 걸리는 함수를 thread를 사용해보자

ex2)
# thread_test.py
import time
import threading # 스레드 생성을 위해서는 threading모듈 필요함

def long_task():
    for i in range(5):
        time.sleep(1)
        print("working:%s\n" % i)
print("Start")

threads = []
for i in range(5):
    t = threading.Thread(target=long_task) # 스레드를 생성함
    threads.append(t)

for t in threads:
    t.start() # 스레드를 실행함

print("End")

25초 -> 5초됨
하지만 start,end 동시에 출력됨 해결방법?
ex3)
# thread_test.py
import time
import threading

def long_task():
    for i in range(5):
        time.sleep(1)
        print("working:%s\n" % i)
print("Start")

threads = []
for i in range(5):
    t = threading.Thread(target=long_task)
    threads.append(t)
for t in threads:
    t.start()
for t in threads: # 이 부분이 추가됨
    t.join() # join으로 스레드가 종료될 때까지 기다

print("End")

