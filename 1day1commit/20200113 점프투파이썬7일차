제어문 - for문
for문의 기본 구조
for 변수 in 리스트(튜플, 문자열):
  수행할 문장1
  수행할 문장2
  ...
  
for문의 응용
ex) 총 5명의 학생이 시험을 보았는데 시험 점수가 60점이 넘으면 합격이고 그렇지 않으면 불합격이다. 합격인지 불합격인지 결과를 보여 주시오.
# marks1.py
marks = [90, 25, 67, 45, 80] # 학생들 점수 리스트
number = 0 # 학생들에게 붙여 줄 번호
for mark in marks: # 90부터 순서대로 mark에 대입
    number = number + 1
    if mark >= 60:
        print("%d번 학생은 합격입니다." % number)
    else:
        print("%d번 학생은 불합격입니다." % number)

for문과 continue문
ex) 60점 넘은 애들만 칭찬하기
# marks2.py
marks = [90, 25, 67, 45, 80]
number = 0
for mark in marks:
    number = number + 1
    if mark < 60: continue # 60이하는 참이되어 for문의 처음으로 돌아감
    print("%d번 학생 축하합니다. 합격입니다." % number)

for문과 함께 자주 사용하는 range함수
range(10) -> 0~9, 10은 포함
range(1, 11) -> 1~10, 11은 포함x
ex) range함수 사용하여 1부터 10더하기
>>>range(1, 11)
>>> add = 0
>>> for i in range(1, 11):
...     add = add + i
...
>>> print(add)
55

ex)60점이 상 range함수 사용 
# marks3.py
marks = [90, 25, 67, 45, 80]
for number in range(len(marks)): # range(5) 
    if marks[number] < 60: continue
    print("%d번 학생 축하합니다. 합격입니다." % (number + 1))
    
ex) 구구단
>>> for i in range(2, 10):
...     for j in range(1, 10):
...             print(i * j, end = " ") #  end 매개변수는 해당 결괏값을 출력할 때 다음 줄로 넘기지 않고 그 줄에 계속해서 출력하기 위한 것
...     print(' ') # ' '는 2단, 3단 구분을 위해 두 번째 for문이 끝나면 결괏값을 다음 줄로 출력하게 해주는 문장이다.
...
2 4 6 8 10 12 14 16 18
3 6 9 12 15 18 21 24 27
4 8 12 16 20 24 28 32 36
5 10 15 20 25 30 35 40 45
6 12 18 24 30 36 42 48 54
7 14 21 28 35 42 49 56 63
8 16 24 32 40 48 56 64 72
9 18 27 36 45 54 63 72 81

리스트 내포 사용하기(리스트 안에 for문을 포함하는 것)
일반 문법
[표현식 for 항목 in 반복 가능 객체 if 조건]
if 조건은 생략 가능
ex)
>>> a = [1, 2, 3, 4]
>>> result = [num * 3 for num in a if num % 2 == 0]
>>> print(result)
[6, 12]
